apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  labels:
    app: web-app
spec:
  replicas: 4  # Репликация по результатам нагрузочного теста
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1       # Позволяет постепенно обновлять поды
      maxUnavailable: 0  # Гарантирует доступность во время обновлений
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      affinity:
        podAntiAffinity:  # Распределение подов по нодам
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - web-app
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:  # Распределяем по зонам доступности
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - zone-a
                - zone-b
                - zone-c
      containers:
      - name: web-app
        image: your-web-app-image:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: "0.2"    # Запрашиваем немного больше CPU для инициализации
            memory: "128Mi"
          limits:
            cpu: "0.5"    # Лимит на случай скачков нагрузки
            memory: "256Mi" # Запас по памяти на случай неожиданных нагрузок
        readinessProbe:    # Проверка готовности после долгой инициализации
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 11  # Время на инициализацию
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
      terminationGracePeriodSeconds: 30 

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-app
  minReplicas: 2  # Минимум для отказоустойчивости ночью
  maxReplicas: 6  # Максимум для пиковых нагрузок
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60  # Целевая загрузка CPU
  behavior:  # Плавное масштабирование
    scaleDown:
      stabilizationWindowSeconds: 600  # 10 минут задержки перед уменьшением
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60  # Быстрое увеличение при нагрузке
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
